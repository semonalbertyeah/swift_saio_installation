======================
dependencies
======================
sudo yum install epem-release
sudo yum update
sudo yum install curl gcc memcached rsync sqlite xfsprogs git-core\
                 libffi-devel xinetd liberasurecode-devel \
                 python-setuptools \
                 python-coverage python-devel python-nose \
                 pyxattr python-eventlet \
                 python-greenlet python-paste-deploy \
                 python-netifaces python-pip python-dns \
                 python-mock


======================
prepare partition
=======================

------------------------
1. use a partition
------------------------
! prepare an hhd or ssd (sdb)

! create an partition sdb1
$ sudo fdisk /dev/sdb
fdisk> (command): n
...

! make file system -> XFS
$ sudo mkfs.xfs /dev/sdb1

! edit /etc/fstab -> mount table
/dev/sdb1 /mnt/sdb1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0

! create mount point and the individual links
$ sudo mkdir /mnt/sdb1
$ sudo mount /mnt/sdb1
$ sudo mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4
$ sudo chown ${USER}:${USER} /mnt/sdb1/*
$ sudo mkdir /srv
$ for x in {1..4}; do sudo ln -s /mnt/sdb1/$x /srv/$x; done
$ sudo mkdir -p /srv/1/node/sdb1 /srv/1/node/sdb5 \
              /srv/2/node/sdb2 /srv/2/node/sdb6 \
              /srv/3/node/sdb3 /srv/3/node/sdb7 \
              /srv/4/node/sdb4 /srv/4/node/sdb8 \
              /var/run/swift
$ sudo chown -R ${USER}:${USER} /var/run/swift
# **Make sure to include the trailing slash after /srv/$x/**
$ for x in {1..4}; do sudo chown -R ${USER}:${USER} /srv/$x/; done

-------------------------
2. use a loopback device
-------------------------
! create the folder for the loopback device
$ sudo mkdir /srv
$ sudo truncate -s 1GB /srv/swift-disk
$ sudo mkfs.xfs /srv/swift-disk

! edit /etc/fstab -> mount tab
/srv/swift-disk /mnt/sdb1 xfs loop,noatime,nodiratime,nobarrier,logbuf=8 0 0

! create the mount point and the individualized links
$ sudo mkdir /mnt/sdb1
$ sudo mount /mnt/sdb1
$ sudo mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4
$ sudo chown ${USER}:${USER} /mnt/sdb1/*
$ for x in {1..4}; do sudo ln -s /mnt/sdb1/$x /srv/$x; done
$ sudo mkdir -p /srv/1/node/sdb1 /srv/1/node/sdb5 \
                /srv/2/node/sdb2 /srv/2/node/sdb6 \
                /srv/3/node/sdb3 /srv/3/node/sdb7 \
                /srv/4/node/sdb4 /srv/4/node/sdb8 \
                /var/run/swift
$ sudo chown -R ${USER}:${USER} /var/run/swift
# **Make sure to include the trailing slash after /srv/$x/**
for x in {1..4}; do sudo chown -R ${USER}:${USER} /srv/$x/; done

----------------------
post-device setup
----------------------
! add the following lines to /etc/rc.local
mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4
chown <your-user-name>:<your-group-name> /var/cache/swift*
mkdir -p /var/run/swift
chown <your-user-name>:<your-group-name> /var/run/swift


=====================
 get the code
=====================
! get python-swiftclient
$ cd $HOME; git clone https://github.com/openstack/python-swiftclient.git

! build a develop installation
$ cd $HOME/python-swiftclient; sudo python setup.py develop; cd -

! get swift
$ cd $HOME; git clone https://github.com/openstack/swift.git

! install requirements -> build a develop installation
$ cd $HOME/swift; sudo pip install -r requirements; sudo python setup.py develop; cd -

! install swift's test requirements
$ cd $HOME/swift; sudo pip install -r test-requirements.txt

========================================
rsync: used to sync files between hosts
 installed above (dependencies)
========================================
! use rsyncd.conf configured swift
$ sudo cp $HOME/swift/doc/saio/rsyncd.conf /etc/
$ sudo sed -i "s/<your-user-name>/${USER}/" /etc/rsyncd.conf

! enable and start rsync

! RHEL7
$ sudo systemctl enable rsyncd
$ sudo systemctl start rsyncd

! RHEL6
! edit /etc/xinetd.d/rsync
disable = no

$ sudo service xinetd restart

! config selinux
sudo setsebool -P rsync_full_access 1

! verify rsync
$ rsync rsync://pub@localhost/
! result as following
account6012
account6022
account6032
account6042
container6011
container6021
container6031
container6041
object6010
object6020
object6030
object6040

========================
memcached
========================
! RHEL7
sudo systemctl enable memcached
sudo systemctl start memcached
! RHEL6
sudo chkconfig memcached on
sudo service memcached start


=====================
 (optional) setting up rsyslog for individual logging
=====================
! use template conf file
$ sudo cp $HOME/swift/doc/saio/rsyslog.d/10-swift.conf /etc/rsyslog.d/

! edit the conf file to meet your need

! edit /etc/rsyslog.conf
$PrivDropToGroup adm

! mkdir for log file (hourly for hourly logging configured in 10-swift.conf)
$ sudo mkdir -p /var/log/swift/hourly

! setup logging dir and start syslog
sudo chown -R root:adm /var/log/swift
sudo chmod -R g+w /var/log/swift
sudo systemctl restart syslog

! or starting service in RHEL6
sudo service syslog start


=============================
 configuring each nodes
=============================
! remove existing swift conf
$ sudo rm -rf /etc/swift

! use template conf file for swift
cd $HOME/swift/doc; sudo do cp -r saio/swift /etc/swift; cd -
$ sudo chown -R ${USER}:${USER} /etc/swift

! update <your-user-name> in conf file
find /etc/swift/ -name \*.conf | xargs sudo sed -i "s/<your-user-name>/${USER}/"


=================================
 setting up scripts for running swift
 script tools
=================================
! copy the SAIO scripts for restting this whole environment
$ mkdir $HOME/bin
$ cd $HOME/swift/doc; cp saio/bin/* $HOME/bin; cd -
$ chmod +x $HOME/bin/*

! if using a loopback device -> add an environment var
$ echo "export SAIO_BLOCK_DEVICE=/srv/swift-disk" >> $HOME/.bashrc

! if not using rsyslog -> remove the "find /var/log/swift..." line
$ sed -i "/find \/var\/log\/swift/d" $HOME/bin/resetswift

! install the sample configuration file for running tests
$ cp $HOME/swift/test/sample.conf /etc/swift/test.conf

! add an env var for running test. this env var is used by test scripts
$ echo "export SWIFT_TEST_CONFIG_FILE=/etc/swift/test.conf" >> $HOME/.bashrc

! add $HOME/bin to PATH
$ echo "export PATH=${PATH}:$HOME/bin" >> $HOME/.bashrc

! source .bashrc
$ . $HOME/.bashrc

! construct the initial rings using the provided script
$ remakerings

! verify unittest
! unit tests do not require any swift daemons running.
$ $HOME/swift/.unittests

! startmain -> (proxy, account, container and object)
! startmain just call "swift-init main start"
$ startmain

=============================
 sample ops
=============================
! get X-Storage-Url and X-Auth-Token
$ curl -v -H 'X-Storage-User: test:tester' -H 'X-Storage-Pass: testing' http://127.0.0.1:8080/auth/v1.0

! check that you can get account
$ curl -v -H 'X-Auth-Token: <token-from-x-auth-token-above>' <url-from-x-storage-url-above>

! check that swift command provided by the python-swiftclient
$ swift -A http://127.0.0.1:8080/auth/v1.0 -U tes:tester -K testing stat

! functional tests:
$ $HOME/swift/.functests

! verfiy the prob
$ $HOME/swift/.probetests




=================================
 some tips
=================================
! you may need to install liberasurecode manually
! download it and install as README says
! It may be installed in /usr/local/lib, then you need to include /usr/local/lib in /etc/ld.so.conf

! storage policy with policy_type = erausre_coding may not work well (no supported ec_type). 
! You can just comment out that storage_policy




=======================
 auth with keystone
=======================

------------------------
 create account for swift
------------------------

! create swift user in keystone
! you must export OS_USERNAME, OS_PASSWORD, OS_TENANT_NAME, OS_AUTH_URL. which has role admin.
$ keystone user-create --name=swift --pass=swiftpass --email=swift@example.com
$ keystone user-role-add --user=swift --tenant=service --role=admin

! add object-storage service
$ keystone service-create --name=swift --type=object-store --description="Openstac Storage"

! specify the point for the Object Storage Service
$ keystone endpoint-create --service-id=$(keystone service-list | awk '/ object-store / {print $2}') \
  --publicurl='http://swiftproxyIP:8080/v1/AUTH_%(tenant_id)s' \
  --internalurl='http://swiftproxyIP:8080/v1/AUTH_%(tenant_id)s' \
  --adminurl=http://swiftproxyIP:8080


-------------------------
 setup auth for swift
-------------------------
! edit /etc/swift/proxy-server.conf
! replace 'tempauth' in pipeline section with 'authtoken keystoneauth'

! add the following sections

# authtoken
[filter:authtoken]
paste.filter_factory = keystonemiddleware.auth_token:filter_factory
# identity_uri: points to keystone admin service (adminURL)
# used by middleware to query keystone about validity of auth tokens.
# API ver not necessary
identity_uri = http://192.168.111.211:35357/

# swift service credentials
# make sure they are created in keystone
# This credentials are used to retrieve an admin token.
# admin token will be used to authorize user tokens.
admin_tenant_name = service
admin_user = swift
admin_password = swiftpass

wift.cache: middleware will get the Swift memcache from the request environment.
cache = swift.cache

# if True: when validating a token, the service catalog is retrieved and stored in X-Service-Catalog header.
# BUT Swift need no service catalog, hence False.
include_service_catalog = False

# if False: it will break public access, StaticWeb, FormPost, TempURL, and authenticated capabilities request.
# hence True.
delay_auth_decision = True

# keystoneauth
[filter:keystoneauth]
use = egg:swift#keystoneauth
operator_roles = admin, swiftoperator
